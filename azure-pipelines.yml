trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - CONTRIBUTING.md

variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  major: 5
  minor: 1
  # creates a counter called versioncounter and seeds it at 100 and then assigns the value to a variable named buildNo.
  buildNo: $[counter('geomversioncounter', 100)]
  
name: $(BuildDefinitionName)_$(SourceBranchName)_$(major).$(minor).$(buildNo)

jobs:
- job: XbimGeometryBuild
  timeoutInMinutes: 120
  steps:
  # Windows script setting up  $(packageversion) of the nuget package based on branch
  # Master branch
  - script: |
      echo ##vso[task.setvariable variable=packageversion]$(major).$(minor).$(buildNo)
    displayName: 'Setting Nuget PackageVersion'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  # Any other branch
  - script: |
      echo ##vso[task.setvariable variable=packageversion]$(major).$(minor).$(buildNo)-$(Build.SourceBranchName)
    displayName: 'Setting Prerelease Nuget PackageVersion'
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  
  
  # Windows script setting up $(fileversion) used to stamp AssemblyFileVersions. 
  # By convention we use 'Major.Minor.BuildNo.0' on Master and 'Major.Minor.0.BuildNo' on other branches
  # Master branch
  - script: | 
      echo ##vso[task.setvariable variable=fileversion]$(major).$(minor).$(buildNo).0
    displayName: 'Setting FileVersion'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  # Any other branch
  - script: | 
      echo ##vso[task.setvariable variable=fileversion]$(major).$(minor).0.$(buildNo)
    displayName: 'Setting Prerelease FileVersion'
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  
  #Task group has not been exported, task groups are not supported yet
  
  - task: NuGetToolInstaller@0
    displayName: 'Use a new NuGet'
    inputs:
      versionSpec: '4.6.2'
  
  # Version .NET Core project files
  # Description - Applies a version to a .NET Core assembly via the .csproj files based on the build number. 
  # Based on https://github.com/rfennell/AzurePipelines/wiki/Version-Assemblies-and-Packages-Tasks-YAML#versiondotnetcoreassembliestask
  - task: VersionDotNetCoreAssemblies@2
    displayName: 'Update netcore FileVersions'
    inputs: 
      # Required arguments
      Path: $(Build.SourcesDirectory)
      VersionNumber: $(fileversion)
      VersionRegex: \d+\.\d+\.\d+\.\d+
      FilenamePattern: .csproj
      Field: fileversion
      OutputVersion: OutputedVersion
  
  # Version Native C++
  - powershell: |
      ((Get-Content -path Xbim.Geometry.Engine\app.rc -Raw) -replace '"FileVersion", "5.0.0.0"','"FileVersion", "$(fileversion)"') | Set-Content -Path Xbim.Geometry.Engine\app.rc
    displayName: 'Update Native C++ FileVersion'
  - powershell: |
      ((Get-Content -path Xbim.Geometry.Engine\app.rc -Raw) -replace 'FILEVERSION 5,0,0,0','FILEVERSION $(major),$(minor),$(buildNo),0') | Set-Content -Path Xbim.Geometry.Engine\app.rc
    displayName: 'Update Native C++ FILEVERSION - for Master'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  - powershell: |
      ((Get-Content -path Xbim.Geometry.Engine\app.rc -Raw) -replace 'FILEVERSION 5,0,0,0','FILEVERSION $(major),$(minor),0,$(buildNo)') | Set-Content -Path Xbim.Geometry.Engine\app.rc
    displayName: 'Update Native C++ FILEVERSION - for Pre-Release'
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  
  - task: NuGetCommand@2
    displayName: 'NuGet restore Xbim.Geometry.Engine.sln'
    inputs:
      restoreSolution: 'Xbim.Geometry.Engine.sln'
      feedsToUse: config
      nugetConfigPath: nuget.config
  
  
  - task: VSBuild@1
    displayName: 'Build solution Xbim.Geometry.Engine.sln'
    inputs:
      solution: 'Xbim.Geometry.Engine.sln'
      msbuildArgs: '/t:build'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
  
  # Delete all Package(s) including newly built - we're going to regenerate with the current build version
  # We need to msbuild pack to complete however before we can run 'dotnet pack' on Geometry Engine
  - task: DeleteFiles@1
    displayName: 'Delete old *.nupkg files from $(build.sourcesdirectory)'
    inputs:
      SourceFolder: '$(build.sourcesdirectory)'
      Contents: '**\bin\$(BuildConfiguration)\**\*.nupkg'
  
  
  # Pack GeometryEngine.Interop
  - script: dotnet pack Xbim.Geometry.Engine.Interop/Xbim.Geometry.Engine.Interop.csproj -c $(BuildConfiguration) -o Xbim.Geometry.Engine.Interop/bin/$(BuildConfiguration) /p:PackageVersion=$(packageversion)
    name: 'Geometry_Interop_Pack'
  
  # Pack ModelGeometry.Scene
  - script: dotnet pack Xbim.ModelGeometry.Scene/Xbim.ModelGeometry.Scene.csproj -c $(BuildConfiguration) -o Xbim.ModelGeometry.Scene/bin/$(BuildConfiguration) /p:PackageVersion=$(packageversion)
    name: 'ModelScene_Pack'
  
    
  # Xbim.Geometry meta package
  - powershell: |
      ((Get-Content -path Xbim.Geometry\Xbim.Geometry.tmpl -Raw) -replace '{{version}}','$(packageversion)') | Set-Content -Path Xbim.Geometry\Xbim.Geometry.nuspec
    name: Geometry_metapackage_Update
  - script: nuget pack Xbim.Geometry\Xbim.Geometry.nuspec -OutputDirectory Xbim.Geometry/bin/$(BuildConfiguration)
    name: Geometry_metapackage_Pack
  
  - task: VSTest@2
    displayName: 'VsTest - testAssemblies'
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: '**\bin\$(BuildConfiguration)\**\Xbim.Geometry.Engine.Interop.Tests.dll'
      searchFolder: '$(System.DefaultWorkingDirectory)'
      runSettingsFile: 'test.runsettings'
      codeCoverageEnabled: true
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
  
  - task: PublishSymbols@1
    displayName: 'Publish symbols path: '
    inputs:
      SearchPattern: '**\bin\**\*.pdb'
    enabled: false
    continueOnError: true
  
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(build.sourcesdirectory)'
      Contents: '**\bin\$(BuildConfiguration)\*.nupkg'
      TargetFolder: '$(build.artifactstagingdirectory)'
    condition: succeededOrFailed()
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
    condition: succeededOrFailed()
  
  # Publish to master or develop MyGet feed based on the source branch
  - task: NuGetCommand@2
    name: 'MyGetPublishing_Master'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: 'MyGetMaster'
      versioningScheme: byEnvVar
      versionEnvVar: packageversion
  
  - task: NuGetCommand@2
    name: 'MyGetPublishing_Develop'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: 'MyGetDev'
      versioningScheme: byEnvVar
      versionEnvVar: packageversion
